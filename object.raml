displayName: Operations on Objects
uriParameters:
  objectName:
    description: |
      Object name
    type: string
type: objectResource
is: [ authorized ]
get:
  description: |
    This implementation of the GET operation retrieves objects from Amazon S3. To use GET, you must have READ access to the object.
    If you grant READ access to the anonymous user, you can return the object without using an authorization header.

    An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however,
    create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an
    object sample.jpg , you can name it photos/2006/February/sample.jpg.

    To get an object from such a logical hierarchy, specify the full key name for the object in the GET operation. For a virtual
    hosted-style request example, if you have the object photos/2006/February/sample.jpg, specify the resource as
    /photos/2006/February/sample.jpg. For a path-style request example, if you have the object photos/2006/February/sample.jpg in
    the bucket named examplebucket, specify the resource as /examplebucket/photos/2006/February/sample.jpg.

    To distribute large files to many people, you can save bandwidth costs using BitTorrent.

    If the object you are retrieving is a GLACIER storage class object, the object is archived in Amazon Glacier. You must firs
    restore a copy using the POST Object restore API before you can retrieve the object. Otherwise, this operation returns
    InvalidObjectStateError error.

    Syntax
    ------
        GET /BucketName/ObjectName HTTP/1.1
        Host: s3.amazonaws.com
        Date: date
        Authorization: signatureValue
        Range:bytes=byte_range
  queryParameters:
    response-content-type:
      description: |
        Sets the Content-Type header of the response.
      type: string
    response-content-language:
      description: |
        Sets the Content-Language header of the response.
      type: string
    response-expires:
      description: |
        Sets the Expires header of the response.
      type: string
    response-cache-control:
      description: |
        Sets the Cache-Control header of the response.
      type: string
    response-content-disposition:
      description: |
        Sets the Content-Disposition header of the response.
      type: string
    response-content-encoding:
      description: |
        Sets the Content-Encoding header of the response.
      type: string
  responses:
    200:
      body:
        "*/*": !!null
put:
  is: [ hasContent, acl ]
  description: |
    This implementation of the PUT operation adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.

    Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucket.

    Amazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the
    last object written. Amazon S3 does not provide object locking; if you need this, make sure to build it into your application
    layer or use versioning instead.

    To ensure that data is not corrupted traversing the network, use the Content-MD5 header. When you use this header, Amazon S3 checks
    the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while
    putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value.

    **Note**
    To configure your application to send the Request Headers prior to sending the request body, use the 100-continue HTTP status code.
    For PUT operations, this helps you avoid sending the message body if the message is rejected based on the headers (e.g., because of
    authentication failure or redirect).

    Syntax
    ------
        PUT /BucketName/ObjectName HTTP/1.1
        Host: s3.amazonaws.com
        Date: date
        Authorization: signatureValue
  body:
    "*/*": !!null
  responses:
    200:
      description: |
        Object added.
delete:
  description: |
    The DELETE operation removes the null version (if there is one) of an object and inserts a delete marker, which becomes the lates
    version of the object. If there isn't a null version, Amazon S3 does not remove any objects.
    To remove a specific version, you must be the bucket owner and you must use the versionId subresource. Using this subresource permanently
    deletes the version. If the object deleted is a Delete Marker, Amazon S3 sets the response header, x-amz-delete-marker, to true.

    If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the
    x-amz-mfa request header in the DELETE versionId request. Requests that include x-amz-mfa must use HTTPS.

    Syntax
    ------
        DELETE /BucketName/ObjectName HTTP/1.1
        Host: s3.amazonaws.com
        Date: date
        Authorization: signatureValue
  responses:
    204:
      description: |
        Object deleted.
head:
  description: |
    The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you are interested
    only in an object's metadata. To use HEAD, you must have READ access to the object.

    A HEAD request has the same options as a GET operation on an object. The response is identical to the GET response except tha
    there is no response body.

    Syntax
    ------
        HEAD /BucketName/ObjectName HTTP/1.1
        Host: s3.amazonaws.com
        Authorization: signatureValue
        Date: date
  responses:
    200:
      description: OK
options:
  description: |
    A browser can send this preflight request to Amazon S3 to determine if it can send an actual request with the specific origin,
    HTTP method, and headers.

    Amazon S3 supports cross-origin resource sharing (CORS) by enabling you to add a cors subresource on a bucket. When a browser
    sends this preflight request, Amazon S3 responds by evaluating the rules that are defined in the cors configuration.

    If cors is not enabled on the bucket, then Amazon S3 returns a 403 Forbidden response.

    Syntax
    ------
        OPTIONS /BucketName/ObjectName HTTP/1.1
        Host: s3.amazonaws.com
        Origin: Origin
        Access-Control-Request-Method: HTTPMethod
        Access-Control-Request-Headers: RequestHeader
  responses:
    200:
      description: OK
post:
  is: [ hasContent ]
  description: |
    The POST operation adds an object to a specified bucket using HTML forms. POST is an alternate form of PUT that enables browser-based
    uploads as a way of putting objects in buckets. Parameters that are passed to PUT via HTTP Headers are instead passed as form fields to
    POST in the multipart/form-data encoded message body. You must have WRITE access on a bucket to add an object to it. Amazon S3 never
    stores partial objects: if you receive a successful response, you can be confident the entire object was stored.

    Amazon S3 is a distributed system. If Amazon S3 receives multiple write requests for the same object simultaneously, all but the las
    object written will be overwritten.

    To ensure that data is not corrupted traversing the network, use the Content-MD5 form field. When you use the Content-MD5 form field,
    Amazon S3 checks the object against the provided MD5 value. If they do not match, Amazon S3 returns an error. Additionally, you can
    calculate the MD5 while posting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value. The ETag only reflects
    changes to the contents of an object, not its metadata.
  body:
    multipart/form-data:
      formParameters:
        AWSAccessKeyId:
          description: |
            The AWS Access Key ID of the owner of the bucket who grants an Anonymous user access for a request that satisfies the set of
            constraints in the Policy.
            Constraints: Required if a policy document is included with the request.
          type: string
          # TODO: current version RAML doesn't allow implement constraint from description
        acl:
          description: |
            Specifies an Amazon S3 access control list. If an invalid access control list is specified, an error is generated
          type: string
          enum: [private, public-read, public-read-write, authenticated-read, bucket-owner-read, bucket-owner-full-control]
          default: private
        file:
          - type: file
            description: |
              File to upload.
              The file or text content must be the last field in the form.
              You cannot upload more than one file at a time.
            required: true
          - type: string
            description: |
              Text content.
              The file or text content must be the last field in the form.
              You cannot upload more than one file at a time.
            required: true
        key:
          description: |
            The name of the uploaded key.

            To use the filename provided by the user, use the ${filename} variable. For example, if the user Betty uploads the file
            lolcatz.jpg and you specify /user/betty/${filename}, the key name will be /user/betty/lolcatz.jpg.
          type: string
          required: true
        policy:
          description: |
            Security Policy describing what is permitted in the request. Requests without a security policy are considered anonymous
            and only work on publicly writable buckets.
          type: string
        success_action_redirect:
          description: |
            The URL to which the client is redirected upon successful upload.
            If success_action_redirect is not specified, Amazon S3 returns the empty document type specified in the success_action_status field.
            If Amazon S3 cannot interpret the URL, it acts as if the field is not present.
            If the upload fails, Amazon S3 displays an error and does not redirect the user to a URL.
          type: string
        redirect:
          description: |
            The redirect field name is deprecated and support for the redirect field name will be removed in the future.
          type: string
        success_action_status:
          description: |
            The status code returned to the client upon successful upload if success_action_redirect is not specified.
            Accepts the values 200, 201, or 204 (default).
            If the value is set to 200 or 204, Amazon S3 returns an empty document with a 200 or 204 status code.
            If the value is set to 201, Amazon S3 returns an XML document with a 201 status code.
            If the value is not set or if it is set to an invalid value, Amazon S3 returns an empty document with a 204 status code.
          type: string
        x-amz-storage-class:
          description: |
            Storage class to use for storing the object.
          type: string
          enum: [ STANDARD, REDUCED_REDUNDANCY]
          default: STANDARD
        x-amz-meta-{*}:
          description: |
            Field names prefixed with x-amz-meta- contain user-specified metadata.
            Amazon S3 does not validate or use this data.
          type: string
        x-amz-security-token:
          description: |
            Amazon DevPay security token.
            Each request that uses Amazon DevPay requires two x-amz-security-token form fields: one for the product token and one for the user token.
          type: string
        x-amz-server-side​-encryption:
          description: |
            Specifies server-side encryption algorithm to use when Amazon S3 creates an object.
          type: string
          enum: [AES256]
        x-amz-website​-redirect-location:
          description: |
            If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL.
            Amazon S3 stores the value of this header in the object metadata.
          type: string
          pattern: ^(https?://|/).*$
  responses:
    100:
      description: Continue
    200:
      description: OK
/?acl: !include object-acl.raml
# /?torrent: TODO GET Object torren
# /?restore: TODO POST Object restore
# /?uploads: TODO Initiate Multipart Upload
# /?partNumber={partNumber}&uploadId={uploadId}: TODO Upload Par
# /?uploadId={uploadId}: TODO "Complete Multipart Upload" and "Abort Multipart Upload" and "List Parts"

#%RAML 0.8
title: "Muse: Mule Sales Enablement API"
version: v1
baseUri: http://examples.ramlicio.us/muse
schemas:
  - presentation: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "object",
         "description": "A product presentation",
         "properties": {
           "id":  { "type": "string" },
           "title":  { "type": "string" },
           "description":  { "type": "string" },
           "fileUrl":  { "type": "string" },
           "productId":  { "type": "string" }
         },
         "required": [ "id", "title", "fileUrl", "productId" ]
      }
  - presentations: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "array",
         "description": "Multiple product presentations",
         "items": {
           "type": "object",
           "properties": {
             "id":  { "type": "string" },
             "title":  { "type": "string" },
             "description":  { "type": "string" },
             "fileUrl":  { "type": "string" },
             "productId":  { "type": "string" }
           },
           "required": [ "id", "title", "fileUrl", "productId" ]
         }
      }
  - product: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "object",
         "description": "A product",
         "properties": {
           "id":  { "type": "string" },
           "name":  { "type": "string" },
           "description":  { "type": "string" },
           "imageUrl":  { "type": "string" },
           "region": { "type": "string" }
         },
         "required": [ "id", "name", "region" ]
      }
  - products: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "array",
         "description": "Multiple products",
         "items": {
           "type": "object",
           "properties": {
             "id":  { "type": "string" },
             "name":  { "type": "string" },
             "description":  { "type": "string" },
             "imageUrl":  { "type": "string" },
             "region":  { "type": "string" }
           },
           "required": [ "id", "name", "region" ]
         }
      }
resourceTypes:
  - base:
      get?:
        headers:
          name:
            displayName: Name
        responses: &standardResponses
          200:
            description: OK
      put?:
        responses: *standardResponses
      patch?:
        responses: *standardResponses
      post?:
          responses:
            201:
              description: Created
      delete?:
        responses: *standardResponses
  - collection:
      type: base
      get:
        is: [ paged ]
        responses:
          200:
            body:
              application/json:
                schema: <<schema | !pluralize>>
      post:
        body:
          application/json:
            schema: <<schema>>
        responses:
          201:
            body:
              application/json:
                schema: <<schema>>
  - member:
      type: base
      get:
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      put:
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      patch:
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      delete:
traits:
  - paged:
      displayName: paged
      headers:
        
      queryParameters:
        start:
          description: The first page to return
          type: number
        pages:
          description: The number of pages to return
          type: number
  - secured:
      displayName: secured
      headers:
        Authorization:
          description: The auth token for this request
      responses:
        401:
          description: Unauthorized
/presentations: &presentations
  type: { collection: { schema: presentation } }
  is: [ secured ]
  get:
    queryParameters:
      title:
        description: Filter by title
  /{presentationId}:
    type: { member: { schema: presentation } }
    is: [ secured ]
/products:
  type: { collection: { schema: product } }
  is: [ secured ]
  get:
    queryParameters:
      region:
        description: Filter by region
  /{productId}:
    type: { member: { schema: product } }
    is: [ secured ]
    /presentations: *presentations
